from typing import List
from collections import defaultdict

class UnionFind:
    def __init__(self, N):
        self.nodes = [i for i in range(N)]
        self.rank = [1 for i in range(N)]       

    def root(self, n):
        if n != self.nodes[n]:
            self.nodes[n] = self.root(self.nodes[n])
        return self.nodes[n]

    def union(self, n1, n2):
        r1 = self.root(n1)
        r2 = self.root(n2)
        if r1 != r2:
            if self.rank[r1] < self.rank[r2]:
                self.nodes[r1] = r2
            elif self.rank[r1] > self.rank[r2]:
                self.nodes[r2] = r1
            else:
                self.nodes[r2] = r1
                self.rank[r1] += 1

class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        N = len(graph)
        u = UnionFind(N)
        for i in range(N):
            for j in range(i+1, N):
                if graph[i][j]:
                    u.union(i, j)
        
        group_node_size = [0 for i in range(N)]
        for i in range(N):
            r = u.root(i)
            group_node_size[r] += 1

        group_initial_size = [0 for i in range(N)]
        for i in initial:
            r = u.root(i)
            group_initial_size[r] += 1

        ans = -1
        max_size = 0
        for i in sorted(initial):
            r = u.root(i)
            if group_initial_size[r] == 1:
                size = group_node_size[r]
                if (size > max_size):
                    ans = i
                    max_size = size

        return ans if ans != -1 else min(initial)

s = Solution()
graph = [[1,1,1],[1,1,1],[1,1,1]]
initial = [1,2]

graph = [[1,1,0],[1,1,0],[0,0,1]]
initial = [0,1,2]
print(s.minMalwareSpread(graph, initial))